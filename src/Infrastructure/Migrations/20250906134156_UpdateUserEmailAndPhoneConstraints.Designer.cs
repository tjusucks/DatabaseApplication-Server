// <auto-generated />
using System;
using DbApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace DbApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250906134156_UpdateUserEmailAndPhoneConstraints")]
    partial class UpdateUserEmailAndPhoneConstraints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.AmusementRide", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ride_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("duration");

                    b.Property<int>("HeightLimitMax")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("height_limit_max");

                    b.Property<int>("HeightLimitMin")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("height_limit_min");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("location");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("manager_id");

                    b.Property<DateTime?>("OpenDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("open_date");

                    b.Property<string>("RideName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("ride_name");

                    b.Property<int>("RideStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ride_status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("RideId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RideName");

                    b.HasIndex("RideStatus");

                    b.ToTable("amusement_rides", null, t =>
                        {
                            t.HasCheckConstraint("CK_amusement_rides_capacity_Range", "\"capacity\" BETWEEN 1 AND 2147483647");

                            t.HasCheckConstraint("CK_amusement_rides_duration_Range", "\"duration\" BETWEEN 1 AND 2147483647");

                            t.HasCheckConstraint("CK_amusement_rides_height_limit_max_Range", "\"height_limit_max\" BETWEEN 50 AND 300");

                            t.HasCheckConstraint("CK_amusement_rides_height_limit_min_Range", "\"height_limit_min\" BETWEEN 50 AND 300");

                            t.HasCheckConstraint("CK_amusement_rides_ride_status_Enum", "\"ride_status\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("attendance_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("attendance_date");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("attendance_status");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("check_in_time");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("check_out_time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<int?>("LeaveType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("leave_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("AttendanceId");

                    b.HasIndex("AttendanceDate");

                    b.HasIndex("AttendanceStatus");

                    b.HasIndex("EmployeeId");

                    b.ToTable("attendances", null, t =>
                        {
                            t.HasCheckConstraint("CK_attendances_attendance_status_Enum", "\"attendance_status\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_attendances_leave_type_Enum", "\"leave_type\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.EmployeeReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("review_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<int?>("EvaluationLevel")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("evaluation_level");

                    b.Property<int?>("EvaluatorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("evaluator_id");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(7)")
                        .HasColumnName("period");

                    b.Property<decimal>("Score")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("ReviewId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EvaluatorId");

                    b.HasIndex("Period");

                    b.ToTable("employee_reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_employee_reviews_evaluation_level_Enum", "\"evaluation_level\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_employee_reviews_score_Range", "\"score\" BETWEEN 0.0 AND 100.0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.FinancialRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("record_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMBER(12,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("approved_by_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("payment_method");

                    b.Property<int?>("ResponsibleEmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("responsible_employee_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("transaction_date");

                    b.Property<int>("TransactionType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("transaction_type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("RecordId");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactionType");

                    b.ToTable("financial_records", null, t =>
                        {
                            t.HasCheckConstraint("CK_financial_records_payment_method_Enum", "\"payment_method\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_financial_records_transaction_type_Enum", "\"transaction_type\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.InspectionRecord", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("inspection_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"));

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("check_date");

                    b.Property<int>("CheckType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("check_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("is_passed");

                    b.Property<string>("IssuesFound")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("issues_found");

                    b.Property<string>("Recommendations")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("recommendations");

                    b.Property<int>("RideId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ride_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("InspectionId");

                    b.HasIndex("CheckDate");

                    b.HasIndex("IsPassed");

                    b.HasIndex("RideId");

                    b.HasIndex("TeamId");

                    b.ToTable("inspection_records", null, t =>
                        {
                            t.HasCheckConstraint("CK_inspection_records_check_type_Enum", "\"check_type\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.MaintenanceRecord", b =>
                {
                    b.Property<int>("MaintenanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("maintenance_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceId"));

                    b.Property<string>("AcceptanceComments")
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("acceptance_comments");

                    b.Property<DateTime?>("AcceptanceDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("acceptance_date");

                    b.Property<decimal>("Cost")
                        .HasColumnType("NUMBER(12,2)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("end_time");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("is_accepted");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("is_completed");

                    b.Property<string>("MaintenanceDetails")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("maintenance_details");

                    b.Property<int>("MaintenanceType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("maintenance_type");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("manager_id");

                    b.Property<string>("PartsReplaced")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("parts_replaced");

                    b.Property<int>("RideId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ride_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("start_time");

                    b.Property<int>("TeamId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("EndTime");

                    b.HasIndex("IsAccepted");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RideId");

                    b.HasIndex("StartTime");

                    b.HasIndex("TeamId");

                    b.ToTable("maintenance_records", null, t =>
                        {
                            t.HasCheckConstraint("CK_maintenance_records_cost_Range", "\"cost\" >= 0");

                            t.HasCheckConstraint("CK_maintenance_records_maintenance_type_Enum", "\"maintenance_type\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.RideTrafficStat", b =>
                {
                    b.Property<int>("RideId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ride_id");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("record_time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<bool?>("IsCrowded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_crowded");

                    b.Property<int>("QueueLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("queue_length");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("VisitorCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("visitor_count");

                    b.Property<int>("WaitingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("waiting_time");

                    b.HasKey("RideId", "RecordTime");

                    b.HasIndex("IsCrowded");

                    b.ToTable("ride_traffic_stats", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.SalaryRecord", b =>
                {
                    b.Property<int>("SalaryRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("salary_record_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("pay_date");

                    b.Property<decimal>("Salary")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("salary");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("SalaryRecordId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayDate");

                    b.ToTable("salary_records", null, t =>
                        {
                            t.HasCheckConstraint("CK_salary_records_salary_Range", "\"salary\" >= 0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.SeasonalEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("event_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<decimal?>("Budget")
                        .HasColumnType("NUMBER(12,2)")
                        .HasColumnName("budget");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("end_date");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("event_name");

                    b.Property<int>("EventType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("event_type");

                    b.Property<string>("Location")
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("location");

                    b.Property<int?>("MaxCapacity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("max_capacity");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("NUMBER(8,2)")
                        .HasColumnName("ticket_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("EventId");

                    b.HasIndex("EndDate");

                    b.HasIndex("EventName");

                    b.HasIndex("EventType");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.ToTable("seasonal_events", null, t =>
                        {
                            t.HasCheckConstraint("CK_seasonal_events_event_type_Enum", "\"event_type\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_seasonal_events_status_Enum", "\"status\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("coupon_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("coupon_code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("DiscountType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("discount_type");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("discount_value");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_used");

                    b.Property<decimal>("MinPurchaseAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_purchase_amount");

                    b.Property<int>("PromotionId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int?>("UsedById")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("used_by");

                    b.Property<DateTime?>("UsedTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("used_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("valid_to");

                    b.HasKey("CouponId");

                    b.HasIndex("CouponCode")
                        .IsUnique();

                    b.HasIndex("IsUsed");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UsedById");

                    b.HasIndex("ValidFrom");

                    b.HasIndex("ValidTo");

                    b.ToTable("coupons", null, t =>
                        {
                            t.HasCheckConstraint("CK_coupons_discount_type_Enum", "\"discount_type\" IN (0, 1)");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PriceHistory", b =>
                {
                    b.Property<int>("PriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("price_history_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceHistoryId"));

                    b.Property<DateTime>("ChangeDatetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("change_datetime")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("new_price");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("old_price");

                    b.Property<int?>("PriceRuleId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("price_rule_id");

                    b.Property<string>("Reason")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("reason");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.HasKey("PriceHistoryId");

                    b.HasIndex("ChangeDatetime");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PriceRuleId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("price_histories", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PriceRule", b =>
                {
                    b.Property<int>("PriceRuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("price_rule_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceRuleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("effective_end_date");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("effective_start_date");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("max_quantity");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("min_quantity");

                    b.Property<decimal>("Price")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("Priority")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("priority");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("rule_name");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("PriceRuleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EffectiveStartDate");

                    b.HasIndex("Priority");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("price_rules", null, t =>
                        {
                            t.HasCheckConstraint("CK_price_rules_price_Range", "\"price\" >= 0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<bool>("AppliesToAllTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("applies_to_all_tickets");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("CurrentUsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("current_usage_count");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("description");

                    b.Property<int>("DisplayPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(100)
                        .HasColumnName("display_priority");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("EndDatetime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("end_datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsCombinable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_combinable");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("promotion_name");

                    b.Property<int>("PromotionType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_type");

                    b.Property<DateTime>("StartDatetime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("start_datetime");

                    b.Property<int?>("TotalUsageLimit")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("total_usage_limit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int?>("UsageLimitPerUser")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("usage_limit_per_user");

                    b.HasKey("PromotionId");

                    b.HasIndex("AppliesToAllTickets");

                    b.HasIndex("DisplayPriority");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndDatetime");

                    b.HasIndex("IsActive");

                    b.HasIndex("PromotionName");

                    b.HasIndex("PromotionType");

                    b.HasIndex("StartDatetime");

                    b.ToTable("promotions", null, t =>
                        {
                            t.HasCheckConstraint("CK_promotions_promotion_type_Enum", "\"promotion_type\" BETWEEN 0 AND 5");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("action_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("action_name");

                    b.Property<int>("ActionType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("discount_amount");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("discount_percentage");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("fixed_price");

                    b.Property<int?>("FreeTicketQuantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("free_ticket_quantity");

                    b.Property<int?>("FreeTicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("free_ticket_type_id");

                    b.Property<int?>("PointsAwarded")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("points_awarded");

                    b.Property<int>("PromotionId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    b.Property<int?>("TargetTicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("target_ticket_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("ActionId");

                    b.HasIndex("ActionType");

                    b.HasIndex("FreeTicketTypeId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TargetTicketTypeId");

                    b.ToTable("promotion_actions", null, t =>
                        {
                            t.HasCheckConstraint("CK_promotion_actions_action_type_Enum", "\"action_type\" BETWEEN 0 AND 4");

                            t.HasCheckConstraint("CK_promotion_actions_discount_amount_Range", "\"discount_amount\" >= 0.0");

                            t.HasCheckConstraint("CK_promotion_actions_discount_percentage_Range", "\"discount_percentage\" BETWEEN 0.0 AND 100.0");

                            t.HasCheckConstraint("CK_promotion_actions_fixed_price_Range", "\"fixed_price\" >= 0.0");

                            t.HasCheckConstraint("CK_promotion_actions_free_ticket_quantity_Range", "\"free_ticket_quantity\" BETWEEN 1 AND 2147483647");

                            t.HasCheckConstraint("CK_promotion_actions_points_awarded_Range", "\"points_awarded\" BETWEEN 0 AND 2147483647");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("condition_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("condition_name");

                    b.Property<int>("ConditionType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("condition_type");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date_to");

                    b.Property<int?>("DayOfWeek")
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("day_of_week");

                    b.Property<string>("MemberLevel")
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("member_level");

                    b.Property<decimal?>("MinAmount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("min_amount");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("min_quantity");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(10)
                        .HasColumnName("priority");

                    b.Property<int>("PromotionId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("VisitorType")
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("visitor_type");

                    b.HasKey("ConditionId");

                    b.HasIndex("ConditionType");

                    b.HasIndex("Priority");

                    b.HasIndex("PromotionId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("promotion_conditions", null, t =>
                        {
                            t.HasCheckConstraint("CK_promotion_conditions_condition_type_Enum", "\"condition_type\" BETWEEN 0 AND 6");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionTicketType", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("PromotionId", "TicketTypeId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("promotion_ticket_types", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.RefundRecord", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("refund_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("ProcessingNotes")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("processing_notes");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("processor_id");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("refund_amount");

                    b.Property<string>("RefundReason")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("refund_reason");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("refund_status");

                    b.Property<DateTime>("RefundTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("refund_time")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("TicketId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.HasKey("RefundId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RefundStatus");

                    b.HasIndex("RefundTime");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.HasIndex("VisitorId");

                    b.ToTable("refund_records", null, t =>
                        {
                            t.HasCheckConstraint("CK_refund_records_refund_amount_Range", "\"refund_amount\" >= 0.0");

                            t.HasCheckConstraint("CK_refund_records_refund_status_Enum", "\"refund_status\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("reservation_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("payment_method");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("payment_status");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("promotion_id");

                    b.Property<DateTime>("ReservationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("reservation_time")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("special_requests");

                    b.Property<int>("Status")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("visit_date");

                    b.Property<int>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.HasKey("ReservationId");

                    b.HasIndex("PaymentStatus");

                    b.HasIndex("PromotionId");

                    b.HasIndex("ReservationTime");

                    b.HasIndex("Status");

                    b.HasIndex("VisitDate");

                    b.HasIndex("VisitorId");

                    b.ToTable("reservations", null, t =>
                        {
                            t.HasCheckConstraint("CK_reservations_discount_amount_Range", "\"discount_amount\" >= 0");

                            t.HasCheckConstraint("CK_reservations_payment_status_Enum", "\"payment_status\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_reservations_status_Enum", "\"status\" BETWEEN 0 AND 3");

                            t.HasCheckConstraint("CK_reservations_total_amount_Range", "\"total_amount\" >= 0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.ReservationItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("item_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("AppliedPriceRuleId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("applied_price_rule_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<decimal>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_amount");

                    b.Property<int>("Quantity")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("quantity");

                    b.Property<int>("ReservationId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("reservation_id");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("total_amount");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("ItemId");

                    b.HasIndex("AppliedPriceRuleId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("reservation_items", null, t =>
                        {
                            t.HasCheckConstraint("CK_reservation_items_discount_amount_Range", "\"discount_amount\" >= 0.0");

                            t.HasCheckConstraint("CK_reservation_items_quantity_Range", "\"quantity\" BETWEEN 1 AND 2147483647");

                            t.HasCheckConstraint("CK_reservation_items_total_amount_Range", "\"total_amount\" >= 0.0");

                            t.HasCheckConstraint("CK_reservation_items_unit_price_Range", "\"unit_price\" >= 0.0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("ReservationItemId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("reservation_item_id");

                    b.Property<int?>("ReservationItemItemId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("serial_number");

                    b.Property<int>("Status")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("status");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime?>("UsedTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("used_time");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("valid_from");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("valid_to");

                    b.Property<int?>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.HasKey("TicketId");

                    b.HasIndex("ReservationItemId");

                    b.HasIndex("ReservationItemItemId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("VisitorId");

                    b.ToTable("tickets", null, t =>
                        {
                            t.HasCheckConstraint("CK_tickets_status_Enum", "\"status\" BETWEEN 0 AND 4");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_type_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"));

                    b.Property<int>("ApplicableCrowd")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("applicable_crowd");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("base_price");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("description");

                    b.Property<int?>("MaxSaleLimit")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("max_sale_limit");

                    b.Property<string>("RulesText")
                        .HasColumnType("VARCHAR2(4000 CHAR)")
                        .HasColumnName("rules_text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("type_name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("TicketTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("ticket_types", null, t =>
                        {
                            t.HasCheckConstraint("CK_ticket_types_applicable_crowd_Enum", "\"applicable_crowd\" BETWEEN 0 AND 4");

                            t.HasCheckConstraint("CK_ticket_types_base_price_Range", "\"base_price\" >= 0.0");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Blacklist", b =>
                {
                    b.Property<int>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.Property<string>("BlacklistReason")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("blacklist_reason");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("VisitorId");

                    b.ToTable("blacklist", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<string>("Certification")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("certification");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("department_name");

                    b.Property<int>("EmploymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("employment_status");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("hire_date")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("manager_id");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("position");

                    b.Property<string>("ResponsibilityArea")
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("responsibility_area");

                    b.Property<string>("StaffNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(20 CHAR)")
                        .HasColumnName("staff_number");

                    b.Property<int?>("StaffType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("staff_type");

                    b.Property<int?>("TeamId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentName");

                    b.HasIndex("ManagerId");

                    b.HasIndex("StaffNumber")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("employees", null, t =>
                        {
                            t.HasCheckConstraint("CK_employees_employment_status_Enum", "\"employment_status\" BETWEEN 0 AND 2");

                            t.HasCheckConstraint("CK_employees_staff_type_Enum", "\"staff_type\" BETWEEN 0 AND 3");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.EntryRecord", b =>
                {
                    b.Property<int>("EntryRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("entry_record_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryRecordId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("EntryGate")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("entry_gate");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("entry_time");

                    b.Property<string>("ExitGate")
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("exit_gate");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("exit_time");

                    b.Property<int?>("TicketId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.HasKey("EntryRecordId");

                    b.HasIndex("EntryTime");

                    b.HasIndex("ExitTime");

                    b.HasIndex("TicketId");

                    b.HasIndex("VisitorId");

                    b.ToTable("entry_records", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("role_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system_role");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("VARCHAR2(500 CHAR)")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.StaffTeam", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("LeaderId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("leader_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("team_name");

                    b.Property<int>("TeamType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("TeamId");

                    b.HasIndex("LeaderId");

                    b.HasIndex("TeamType");

                    b.ToTable("staff_teams", null, t =>
                        {
                            t.HasCheckConstraint("CK_staff_teams_team_type_Enum", "\"team_type\" BETWEEN 0 AND 2");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.TeamMember", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("team_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("join_date")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.HasKey("TeamId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TeamId");

                    b.ToTable("team_members", (string)null);
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("user_id");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR2(100 CHAR)")
                        .HasColumnName("email");

                    b.Property<int?>("Gender")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("gender");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(256 CHAR)")
                        .HasColumnName("password_hash");

                    b.Property<byte>("PermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(2)")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("permission_level");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR2(20 CHAR)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("RegisterTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("register_time")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("RoleId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50 CHAR)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("\"email\" IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("\"phone_number\" IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("CK_users_gender_Enum", "\"gender\" IN (0, 1)");

                            t.HasCheckConstraint("CK_users_permission_level_Range", "\"permission_level\" BETWEEN 0 AND 4");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("visitor_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("Height")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("height");

                    b.Property<bool>("IsBlacklisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_blacklisted");

                    b.Property<string>("MemberLevel")
                        .HasColumnType("VARCHAR2(30 CHAR)")
                        .HasColumnName("member_level");

                    b.Property<DateTime?>("MemberSince")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("member_since");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("SYSTIMESTAMP");

                    b.Property<int>("VisitorType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasDefaultValue(0)
                        .HasColumnName("visitor_type");

                    b.HasKey("VisitorId");

                    b.HasIndex("Height");

                    b.HasIndex("IsBlacklisted");

                    b.HasIndex("VisitorType");

                    b.ToTable("visitors", null, t =>
                        {
                            t.HasCheckConstraint("CK_visitors_height_Range", "\"height\" BETWEEN 50 AND 300");

                            t.HasCheckConstraint("CK_visitors_points_Range", "\"points\" BETWEEN 0 AND 2147483647");

                            t.HasCheckConstraint("CK_visitors_visitor_type_Enum", "\"visitor_type\" IN (0, 1)");
                        });
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.AmusementRide", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Manager")
                        .WithMany("AmusementRides")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.Attendance", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.EmployeeReview", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Evaluator")
                        .WithMany("EvaluatedReviews")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.FinancialRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "ResponsibleEmployee")
                        .WithMany()
                        .HasForeignKey("ResponsibleEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedBy");

                    b.Navigation("ResponsibleEmployee");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.InspectionRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.ResourceSystem.AmusementRide", "Ride")
                        .WithMany("InspectionRecords")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.StaffTeam", "Team")
                        .WithMany("InspectionRecords")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.MaintenanceRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbApp.Domain.Entities.ResourceSystem.AmusementRide", "Ride")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.StaffTeam", "Team")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Ride");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.RideTrafficStat", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.ResourceSystem.AmusementRide", "Ride")
                        .WithMany("RideTrafficStats")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.SalaryRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany("SalaryRecords")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Coupon", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Promotion", "Promotion")
                        .WithMany("Coupons")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "UsedBy")
                        .WithMany("UsedCoupons")
                        .HasForeignKey("UsedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Promotion");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PriceHistory", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.PriceRule", "PriceRule")
                        .WithMany()
                        .HasForeignKey("PriceRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("PriceRule");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PriceRule", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany("PriceRules")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Promotion", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionAction", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "FreeTicketType")
                        .WithMany()
                        .HasForeignKey("FreeTicketTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Promotion", "Promotion")
                        .WithMany("PromotionActions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TargetTicketType")
                        .WithMany()
                        .HasForeignKey("TargetTicketTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FreeTicketType");

                    b.Navigation("Promotion");

                    b.Navigation("TargetTicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionCondition", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Promotion", "Promotion")
                        .WithMany("PromotionConditions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Promotion");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.PromotionTicketType", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Promotion", "Promotion")
                        .WithMany("PromotionTicketTypes")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany("PromotionTicketTypes")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.RefundRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Ticket", "Ticket")
                        .WithOne("RefundRecord")
                        .HasForeignKey("DbApp.Domain.Entities.TicketingSystem.RefundRecord", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Processor");

                    b.Navigation("Ticket");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Reservation", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Promotion", "Promotion")
                        .WithMany("Reservations")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "Visitor")
                        .WithMany("Reservations")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.ReservationItem", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.PriceRule", "AppliedPriceRule")
                        .WithMany()
                        .HasForeignKey("AppliedPriceRuleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Reservation", "Reservation")
                        .WithMany("ReservationItems")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppliedPriceRule");

                    b.Navigation("Reservation");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Ticket", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.ReservationItem", "ReservationItem")
                        .WithMany()
                        .HasForeignKey("ReservationItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.ReservationItem", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationItemItemId");

                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ReservationItem");

                    b.Navigation("TicketType");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Blacklist", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "Visitor")
                        .WithOne()
                        .HasForeignKey("DbApp.Domain.Entities.UserSystem.Blacklist", "VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Employee", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.User", "User")
                        .WithOne()
                        .HasForeignKey("DbApp.Domain.Entities.UserSystem.Employee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DbApp.Domain.Entities.UserSystem.StaffTeam", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.EntryRecord", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.TicketingSystem.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DbApp.Domain.Entities.UserSystem.Visitor", "Visitor")
                        .WithMany("EntryRecords")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.StaffTeam", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.TeamMember", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbApp.Domain.Entities.UserSystem.StaffTeam", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.User", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Visitor", b =>
                {
                    b.HasOne("DbApp.Domain.Entities.UserSystem.User", "User")
                        .WithOne()
                        .HasForeignKey("DbApp.Domain.Entities.UserSystem.Visitor", "VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.ResourceSystem.AmusementRide", b =>
                {
                    b.Navigation("InspectionRecords");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("RideTrafficStats");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Promotion", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("PromotionActions");

                    b.Navigation("PromotionConditions");

                    b.Navigation("PromotionTicketTypes");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Reservation", b =>
                {
                    b.Navigation("ReservationItems");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.ReservationItem", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.Ticket", b =>
                {
                    b.Navigation("RefundRecord");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.TicketingSystem.TicketType", b =>
                {
                    b.Navigation("PriceRules");

                    b.Navigation("PromotionTicketTypes");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Employee", b =>
                {
                    b.Navigation("AmusementRides");

                    b.Navigation("Attendances");

                    b.Navigation("EvaluatedReviews");

                    b.Navigation("Reviews");

                    b.Navigation("SalaryRecords");

                    b.Navigation("Subordinates");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.StaffTeam", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("InspectionRecords");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("DbApp.Domain.Entities.UserSystem.Visitor", b =>
                {
                    b.Navigation("EntryRecords");

                    b.Navigation("Reservations");

                    b.Navigation("UsedCoupons");
                });
#pragma warning restore 612, 618
        }
    }
}
